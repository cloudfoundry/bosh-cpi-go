// This file was generated by counterfeiter
package rpcfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cpi-go/rpc"
)

type FakeRetryableError struct {
	ErrorStub        func() string
	errorMutex       sync.RWMutex
	errorArgsForCall []struct{}
	errorReturns     struct {
		result1 string
	}
	CanRetryStub        func() bool
	canRetryMutex       sync.RWMutex
	canRetryArgsForCall []struct{}
	canRetryReturns     struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetryableError) Error() string {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct{}{})
	fake.recordInvocation("Error", []interface{}{})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		return fake.ErrorStub()
	}
	return fake.errorReturns.result1
}

func (fake *FakeRetryableError) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeRetryableError) ErrorReturns(result1 string) {
	fake.ErrorStub = nil
	fake.errorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRetryableError) CanRetry() bool {
	fake.canRetryMutex.Lock()
	fake.canRetryArgsForCall = append(fake.canRetryArgsForCall, struct{}{})
	fake.recordInvocation("CanRetry", []interface{}{})
	fake.canRetryMutex.Unlock()
	if fake.CanRetryStub != nil {
		return fake.CanRetryStub()
	}
	return fake.canRetryReturns.result1
}

func (fake *FakeRetryableError) CanRetryCallCount() int {
	fake.canRetryMutex.RLock()
	defer fake.canRetryMutex.RUnlock()
	return len(fake.canRetryArgsForCall)
}

func (fake *FakeRetryableError) CanRetryReturns(result1 bool) {
	fake.CanRetryStub = nil
	fake.canRetryReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRetryableError) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.canRetryMutex.RLock()
	defer fake.canRetryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRetryableError) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rpc.RetryableError = new(FakeRetryableError) //nolint:errcheck
